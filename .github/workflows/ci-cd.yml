name: Healio-AI CI/CD Pipeline (MongoDB to Server & Web to Vercel)

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

jobs:
  deploy-mongodb:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'master' || github.ref_name == 'dev')
    steps:
      - name: Checkout code (untuk docker-compose.yml)
        uses: actions/checkout@v4

      - name: Deploy MongoDB to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            trap 'echo "An error occurred during MongoDB deployment. Exiting..." && exit 1' ERR

            SCRIPT_BRANCH_NAME="${{ github.ref_name }}"
            # Direktori di server untuk menyimpan docker-compose.yml dan file .env terkait MongoDB
            TARGET_DIR="healio-ai-mongo-infra"

            echo "Deploying MongoDB for branch: $SCRIPT_BRANCH_NAME"

            if [ -z "$SCRIPT_BRANCH_NAME" ]; then
              echo "Critical Error: SCRIPT_BRANCH_NAME is empty."
              exit 1
            fi

            if [ "$SCRIPT_BRANCH_NAME" = "master" ]; then
              MONGO_HOST_PORT_VALUE="27017" # Port MongoDB untuk produksi
              MONGO_INITDB_DATABASE_VALUE="healio_db_prod"
            elif [ "$SCRIPT_BRANCH_NAME" = "dev" ]; then
              MONGO_HOST_PORT_VALUE="27018" # Port MongoDB untuk dev (jika berbeda)
              MONGO_INITDB_DATABASE_VALUE="healio_db_dev"
            else
              echo "Error: Branch '$SCRIPT_BRANCH_NAME' is not 'master' or 'dev'. MongoDB deployment skipped."
              exit 1 # Keluar jika branch tidak dikenali
            fi

            echo "Preparing MongoDB deployment directory: $TARGET_DIR"
            if [ ! -d "$TARGET_DIR" ]; then
              mkdir -p "$TARGET_DIR"
            fi
            cd "$TARGET_DIR"
            echo "Successfully changed directory to $TARGET_DIR"

            # Salin file docker-compose.yml yang sudah diperbarui (hanya MongoDB)
            echo "Copying docker-compose.yml for MongoDB..."
            cp ${{ github.workspace }}/docker-compose.yml ./docker-compose.yml

            echo "Creating .env file for MongoDB in $TARGET_DIR/.env ..."
            cat > .env <<-EOF
            MONGO_HOST_PORT=${MONGO_HOST_PORT_VALUE}
            MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_VALUE}
            # MONGO_INITDB_ROOT_USERNAME=admin
            # MONGO_INITDB_ROOT_PASSWORD=securepassword
            EOF

            echo "Environment variables for MongoDB docker-compose set."
            echo "MONGO_HOST_PORT=${MONGO_HOST_PORT_VALUE}"
            echo "MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_VALUE}"

            echo "Pulling latest MongoDB image (if needed)..."
            docker-compose pull mongodb || true

            echo "Starting MongoDB service with docker-compose..."
            # Perintah ini akan menghentikan dan menghapus container lama jika ada perubahan konfigurasi atau image,
            # lalu membuat yang baru. Volume data akan tetap ada.
            docker-compose up -d --force-recreate mongodb

            echo "MongoDB deployment for branch $SCRIPT_BRANCH_NAME completed successfully."
