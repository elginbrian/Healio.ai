name: Healio-AI CI/CD Pipeline (MongoDB to Server & Web to Vercel)

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

jobs:
  deploy-mongodb:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'master' || github.ref_name == 'dev')
    steps:
      - name: Deploy MongoDB to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            trap 'echo "An error occurred during MongoDB deployment. Exiting..." && exit 1' ERR

            SCRIPT_BRANCH_NAME="${{ github.ref_name }}"
            REPO_URL="https://github.com/elginbrian/Healio.ai.git" 
            TARGET_DIR="healio-ai-app-mongo" # Nama direktori bisa disesuaikan

            echo "Deploying MongoDB for branch: $SCRIPT_BRANCH_NAME from $REPO_URL"

            if [ -z "$SCRIPT_BRANCH_NAME" ]; then
              echo "Critical Error: SCRIPT_BRANCH_NAME is empty."
              exit 1
            fi

            if [ "$SCRIPT_BRANCH_NAME" = "master" ]; then
              MONGO_HOST_PORT_VALUE="27017"
              MONGO_INITDB_DATABASE_VALUE="healio_db_prod"
            elif [ "$SCRIPT_BRANCH_NAME" = "dev" ]; then
              MONGO_HOST_PORT_VALUE="27018"
              MONGO_INITDB_DATABASE_VALUE="healio_db_dev"
            else
              echo "Error: Branch '$SCRIPT_BRANCH_NAME' is not 'master' or 'dev'. MongoDB deployment skipped."
              exit 1
            fi

            echo "Preparing deployment directory: $TARGET_DIR"
            if [ -d "$TARGET_DIR" ]; then
              echo "Removing existing directory: $TARGET_DIR"
              rm -rf "$TARGET_DIR"
            fi

            echo "Cloning repository $REPO_URL (branch $SCRIPT_BRANCH_NAME) into $TARGET_DIR..."
            # Jika repositori Anda private, Anda mungkin perlu menggunakan PAT (Personal Access Token)
            # atau kunci SSH deploy untuk git clone. Untuk repo publik, HTTPS URL sudah cukup.
            git clone --branch $SCRIPT_BRANCH_NAME $REPO_URL $TARGET_DIR

            cd "$TARGET_DIR"
            echo "Successfully changed directory to $TARGET_DIR"
            echo "Current directory content:"
            ls -la

            # Pastikan docker-compose.yml ada di root direktori yang di-clone
            if [ ! -f "./docker-compose.yml" ]; then
                echo "Error: docker-compose.yml not found in the cloned repository at $(pwd)/docker-compose.yml"
                exit 1
            fi
            echo "Using docker-compose.yml found in cloned repository."

            echo "Creating .env file for MongoDB in $TARGET_DIR/.env ..."
            cat > .env <<-EOF
            MONGO_HOST_PORT=\${MONGO_HOST_PORT_VALUE}
            MONGO_INITDB_DATABASE=\${MONGO_INITDB_DATABASE_VALUE}
            # Jika Anda menggunakan autentikasi MongoDB, tambahkan:
            # MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USER }}
            # MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            EOF

            echo "Environment variables for MongoDB docker-compose set."

            echo "Pulling latest MongoDB image (if needed)..."
            docker-compose pull mongodb || true

            echo "Starting MongoDB service with docker-compose..."
            # Variabel MONGO_HOST_PORT dan MONGO_INITDB_DATABASE akan diambil dari file .env oleh docker-compose
            docker-compose up -d --force-recreate mongodb

            echo "MongoDB deployment for branch $SCRIPT_BRANCH_NAME completed successfully."
